import React from 'react';
import AddressShow from './components/AddressShow';
import Adapter from 'enzyme-adapter-react-16';
import addresses from './address-list.json';
import { configure, shallow, mount } from 'enzyme';

configure({ adapter: new Adapter() });
const address = addresses[0];

describe('AddressShow Shallow Suite', function() {
    let wrapper = null;
    var quiet = true;

    /*
     * Display debug information about a DOM node of a component by index
     * @param {object} wrapper - The HTML generated by your component
     * @param {number} index - Index of HTML element you want to see.
     * @param {boolean} talkToMe - Speak even if quiet is true
     */
    const fakeEvent = {
        target: {
            value: ''
        }
    };
    const getIndex = (wrapper, index, talkToMe) => {
        if (!quiet || talkToMe) {
            const ninep = wrapper
                .find('div#pPaper')
                .childAt(0)
                .childAt(0)
                .childAt(0)
                .childAt(index)
                .debug();
            console.log('NINEP:', ninep);
        }
    };
    const setAddress = () => {
        const address = addresses[1];
        wrapper.setProps({ name: address });
    };
    const saveFunc = address => {
        console.log(address);
    };
    const deleteFunc = () => {};
    const defaultFieldTest = (name, index, talkToMe) => {
        const wrapper = mount(
            <AddressShow
                name={address}
                showAddress={setAddress}
                setAddress={setAddress}
            />
        );
        //console.log(wrapper.debug());
        const welcome = <p>{name}</p>;
        getIndex(wrapper, index, talkToMe);
        expect(wrapper.contains(welcome)).toEqual(true);
    };
    const afterClickFieldTest = (name, index, talkToMe) => {
        wrapper = mount(
            <AddressShow
                name={address}
                showAddress={setAddress}
                setAddress={setAddress}
            />
        );
        const patty = <p>{name}</p>;
        //console.log(wrapper.debug());
        wrapper.find('Button#nextButton').simulate('click');
        getIndex(wrapper, index, talkToMe);
        expect(wrapper.contains(patty)).toEqual(true);
    };

    const afterSClickFieldTest = (name, index, talkToMe) => {
        wrapper = mount(
            <AddressShow
                name={address}
                showAddress={setAddress}
                setAddress={setAddress}
            />
        );
        const patty = <p>{name}</p>;
        //console.log(wrapper.debug());
        wrapper.find('Button#showButton').simulate('click');
        getIndex(wrapper, index, talkToMe);
        expect(wrapper.contains(patty)).toEqual(true);
    };

    const afterTClickFieldTest = (name, index, talkToMe) => {
        wrapper = mount(
            <AddressShow
                name={address}
                showAddress={setAddress}
                setAddress={setAddress}
            />
        );
        const patty = <p>{name}</p>;
        //console.log(wrapper.debug());
        wrapper.find('Button#backButton').simulate('click');
        getIndex(wrapper, index, talkToMe);
        expect(wrapper.contains(patty)).toEqual(true);
    };

    const afterEditFieldTest = (name, index, talkToMe) => {
        wrapper = shallow(
            <AddressShow
                name={address}
                showAddress={setAddress}
                setAddress={setAddress}
            />
        );
        //console.log(wrapper.debug());
        wrapper
            .dive()
            .instance()
            .addressEdit(false);
        wrapper
            .dive()
            .instance()
            .addressEdit(addresses[0]);
        getIndex(wrapper, index, talkToMe);
        expect(wrapper.dive().instance().state.editOpen).toEqual(false);
    };

    const saveTest = (name, index, talkToMe) => {
        wrapper = shallow(
            <AddressShow
                name={address}
                showAddress={setAddress}
                setAddress={setAddress}
                save={saveFunc}
            />
        );
        //console.log(wrapper.debug());
        wrapper
            .dive()
            .instance()
            .save();
        getIndex(wrapper, index, talkToMe);
        expect(wrapper.dive().instance().state.editOpen).toEqual(false);
    };

    const editTest = (name, index, talkToMe) => {
        wrapper = shallow(
            <AddressShow
                name={address}
                showAddress={setAddress}
                setAddress={setAddress}
                save={saveFunc}
            />
        );
        //console.log(wrapper.debug());
        wrapper
            .dive()
            .instance()
            .setEdits(address, fakeEvent);
        getIndex(wrapper, index, talkToMe);
        expect(wrapper.dive().instance().state.edits.firstName).toEqual(name);
    };

    const editButtonTest = (name, index, talkToMe) => {
        wrapper = mount(
            <AddressShow
                name={address}
                showAddress={setAddress}
                setAddress={setAddress}
            />
        );
        console.log(wrapper.state());
        wrapper.find('Button#editButton').simulate('click');
        wrapper.update();
        getIndex(wrapper, index, talkToMe);
        expect(wrapper.state('editOpen')).toEqual(undefined);
    };

    it('renders and display the default firstName', () => {
        defaultFieldTest('Tammy', 0);
    });

    it('renders and display the default lastName', () => {
        defaultFieldTest('Baldwin', 1);
    });

    it('renders and display the default street', () => {
        defaultFieldTest('709 Hart Senate Office Building', 2);
    });

    it('renders and display the default city', () => {
        defaultFieldTest('Washington DC', 3);
    });

    it('renders and display the default state', () => {
        defaultFieldTest('WI', 4);
    });

    it('renders and display the default zip', () => {
        defaultFieldTest(' 20510', 5);
    });

    it('renders setAddress button to set the phone', () => {
        defaultFieldTest('202-224-5653', 6);
    });

    it('renders setAddress button to set the firstName', () => {
        afterClickFieldTest('Sherrod', 0);
    });
    it('renders setAddress button to set the lastName', () => {
        afterClickFieldTest('Brown', 1);
    });
    it('renders setAddress button to set the address', () => {
        afterClickFieldTest('713 Hart Senate Office Building', 2);
    });
    it('renders setAddress button to set the city', () => {
        afterClickFieldTest('Washington DC', 3);
    });
    it('renders setAddress button to set the state', () => {
        afterClickFieldTest('OH', 4);
    });
    it('renders setAddress button to set the zip', () => {
        afterClickFieldTest(' 20510', 5);
    });
    it('renders setAddress button to set the phone', () => {
        afterClickFieldTest('202-224-2315', 6);
    });

    it('renders setAddress button to set the firstName', () => {
        afterSClickFieldTest('Sherrod', 0);
    });
    it('renders setAddress button to set the lastName', () => {
        afterSClickFieldTest('Brown', 1);
    });
    it('renders setAddress button to set the address', () => {
        afterSClickFieldTest('713 Hart Senate Office Building', 2);
    });
    it('renders setAddress button to set the city', () => {
        afterSClickFieldTest('Washington DC', 3);
    });
    it('renders setAddress button to set the state', () => {
        afterSClickFieldTest('OH', 4);
    });
    it('renders setAddress button to set the zip', () => {
        afterSClickFieldTest(' 20510', 5);
    });
    it('renders setAddress button to set the phone', () => {
        afterSClickFieldTest('202-224-2315', 6);
    });

    it('renders setAddress button to set the firstName', () => {
        afterTClickFieldTest('Sherrod', 0);
    });
    it('renders setAddress button to set the lastName', () => {
        afterTClickFieldTest('Brown', 1);
    });
    it('renders setAddress button to set the address', () => {
        afterTClickFieldTest('713 Hart Senate Office Building', 2);
    });
    it('renders setAddress button to set the city', () => {
        afterTClickFieldTest('Washington DC', 3);
    });
    it('renders setAddress button to set the state', () => {
        afterTClickFieldTest('OH', 4);
    });
    it('renders setAddress button to set the zip', () => {
        afterTClickFieldTest(' 20510', 5);
    });
    it('renders setAddress button to set the phone', () => {
        afterTClickFieldTest('202-224-2315', 6);
    });

    it('editFunctionTest', () => {
        afterEditFieldTest('Tammy', 0);
    });

    it('save function test', () => {
        saveTest('unknwon', 0);
    });

    it('edit function test', () => {
        editTest('unknown', 0);
    });

    it('edit button test', () => {
        editButtonTest('unknown', 0);
    });

    it('delete button test', () => {
        const wrapper = mount(
            <AddressShow
                name={address}
                showAddress={setAddress}
                setAddress={setAddress}
                delete={deleteFunc}
            />
        );
        wrapper.find('Button#deleteButton').simulate('click');
    });
});
